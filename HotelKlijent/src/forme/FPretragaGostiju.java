/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Gost;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableModel;
import logika.Kontroler;
import modeli.ModelTabeleGosti;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Marjan
 */
public class FPretragaGostiju extends javax.swing.JDialog {

    List<Gost> gosti;
    FUnosNovogIzdavanjaSobe formaIzdavanje;

    /**
     * Creates new form FPretragaGostiju
     */
    public FPretragaGostiju(java.awt.Frame parent, boolean modal) throws IOException {
        super(parent, modal);
        initComponents();
        Kontroler.getInstanca().popuniTabeluGostiju(this);
        postaviOsluskivac();
        setLocationRelativeTo(null);
        btnIzaberi.setVisible(false);

    }

    public FPretragaGostiju(java.awt.Frame parent, boolean modal, FUnosNovogIzdavanjaSobe funis) throws IOException {

        super(parent, modal);
        initComponents();
        Kontroler.getInstanca().popuniTabeluGostiju(this);
        postaviOsluskivac();
        setLocationRelativeTo(null);
        formaIzdavanje = funis;
        srediFormuZaUnosIznajmljivanja();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaGosti = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtPrezimePretraga = new javax.swing.JTextField();
        btnObrisi = new javax.swing.JButton();
        btnDetalji = new javax.swing.JButton();
        btnIzaberi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Pretraga gostiju");

        tabelaGosti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaGosti);

        jLabel2.setText("Unesite prezime zeljenog gosta:");

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnDetalji.setText("Detalji");
        btnDetalji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetaljiActionPerformed(evt);
            }
        });

        btnIzaberi.setText("Izaberi");
        btnIzaberi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzaberiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(41, 41, 41)
                        .addComponent(txtPrezimePretraga))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnObrisi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnIzaberi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(btnDetalji, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPrezimePretraga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnIzaberi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDetalji)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisi))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDetaljiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetaljiActionPerformed
        int red = tabelaGosti.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Morate izabrati gosta");
        } else {
            try {
                JOptionPane.showMessageDialog(this, "Podaci o izabranom gostu.");
                ModelTabeleGosti mtg = (ModelTabeleGosti) tabelaGosti.getModel();
                Gost g = mtg.vratiGosta(red);
                Gost pronadjeniGost = Kontroler.getInstanca().pronadjiGosta(g);
                if (pronadjeniGost == null) {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da nadje gosta!");
                    return;
                }
                FDetaljiGosta fdg = new FDetaljiGosta(null, true);
                fdg.postaviVrednostiGosta(pronadjeniGost);
                this.dispose();
                fdg.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(FPretragaGostiju.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_btnDetaljiActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int red = tabelaGosti.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Morate izabrati gosta za brisanje!");
        } else {
            int opcija = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da zelite da obrisete odabranog gosta?", "Potvrda brisanja", JOptionPane.YES_OPTION);
            if (opcija == 0) {
                try {
                    //gosti = Kontroler.getInstanca().vratiGoste();
                    ModelTabeleGosti mtg = (ModelTabeleGosti) tabelaGosti.getModel();
                    Gost g = mtg.vratiGosta(red);
                    Kontroler.getInstanca().obrisiGosta(g, red, this);
                } catch (IOException ex) {
                    Logger.getLogger(FPretragaGostiju.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }


    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnIzaberiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzaberiActionPerformed
        int red = tabelaGosti.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati gosta koga zelite da dodate!");
        } else {
//            try {
            ModelTabeleGosti mtg = (ModelTabeleGosti) tabelaGosti.getModel();

            //gosti = Kontroler.getInstanca().vratiGoste();
            Gost g = mtg.vratiGosta(red);
            if (!g.isSmesten()) {
                formaIzdavanje.setIzabraniGosta(g);
                this.dispose();
                JOptionPane.showMessageDialog(this, "Sistem je dodao gosta");
            } else {
                JOptionPane.showMessageDialog(this, "Izabrali ste gosta koji je vec smesten");

            }
//            } catch (IOException ex) {
//                Logger.getLogger(FPretragaGostiju.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }

    }//GEN-LAST:event_btnIzaberiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FPretragaGostiju.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FPretragaGostiju.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FPretragaGostiju.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FPretragaGostiju.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    FPretragaGostiju dialog = new FPretragaGostiju(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(FPretragaGostiju.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetalji;
    private javax.swing.JButton btnIzaberi;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaGosti;
    private javax.swing.JTextField txtPrezimePretraga;
    // End of variables declaration//GEN-END:variables

    public void srediFormu(List<Gost> gosti) {
        TableModel tm = new ModelTabeleGosti(gosti);
        tabelaGosti.setModel(tm);
    }

    public void popuniTabeluNeuspesno() {
        JOptionPane.showMessageDialog(this, "Ne postoji nijedan gost u bazi.");

    }

    private void postaviOsluskivac() {
        txtPrezimePretraga.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filter();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filter();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                filter();
            }
        });

    }

    private void filter() {
        String filter = txtPrezimePretraga.getText().trim();
        if (filter.length() == 0 || filter.isEmpty()) {
            ModelTabeleGosti mtg = Kontroler.getInstanca().vratiModelGosti();
            tabelaGosti.setModel(mtg);
        }
        try {
            Kontroler.getInstanca().filterG(filter, this);
        } catch (IOException ex) {
            Logger.getLogger(FPretragaGostiju.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void filterUspesno() {
        JOptionPane.showMessageDialog(this, "Sistem je nasao gosta po zadatim vrednostima!");

    }

    public void filterNeuspesan() {
        JOptionPane.showMessageDialog(this, "Sistem ne moze da nadje goste po zadatim vrednostima!");

    }

    public void uspesnoObrisano(int red) throws IOException {
        ModelTabeleGosti mtg = (ModelTabeleGosti) tabelaGosti.getModel();
        JOptionPane.showMessageDialog(this, "Sistem je obrisao gosta!");
        FPretragaGostiju fpg = new FPretragaGostiju(null, true);
        mtg.obrisiGosta(red);
        Kontroler.getInstanca().popuniTabeluGostiju(fpg);
        dispose();
        fpg.setVisible(true);
    }

    public void neuspesnoObrisano(ServerskiOdgovor so) {
        JOptionPane.showMessageDialog(this, so.getPoruka());

    }

    private void srediFormuZaUnosIznajmljivanja() {
        btnDetalji.setVisible(false);
        btnObrisi.setVisible(false);
        btnIzaberi.setVisible(true);
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Gost;
import domen.IzdavanjeSobe;
import domen.Recepcioner;
import domen.Soba;
import java.awt.Color;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import logika.Kontroler;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Marjan
 */
public class FUnosNovogIzdavanjaSobe extends javax.swing.JDialog {

    Soba izabranaSoba;
    Gost izabraniGost;

    /**
     * Creates new form FUnosNovogIzdavanjaSobe
     */
    public FUnosNovogIzdavanjaSobe(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // izabranaSoba = new Soba();
        // izabraniGost = new Gost();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtGostKojiIznajmljujeSobu = new javax.swing.JTextField();
        txtSobaZaIznajmljivanje = new javax.swing.JTextField();
        btnOdaberiGosta = new javax.swing.JButton();
        btnOdaberiSobu = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        datePickerDolazak = new com.toedter.calendar.JDateChooser();
        btnOdustani = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Gost koji iznajmljuje sobu");

        jLabel2.setText("Soba za iznajmljivanje");

        txtGostKojiIznajmljujeSobu.setEnabled(false);

        txtSobaZaIznajmljivanje.setEnabled(false);

        btnOdaberiGosta.setText("Odaberi gosta");
        btnOdaberiGosta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdaberiGostaActionPerformed(evt);
            }
        });

        btnOdaberiSobu.setText("Odaberi sobu");
        btnOdaberiSobu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdaberiSobuActionPerformed(evt);
            }
        });

        jLabel3.setText("Datum dolaska");

        btnOdustani.setText("Odustani");
        btnOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdustaniActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtGostKojiIznajmljujeSobu)
                            .addComponent(txtSobaZaIznajmljivanje, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                            .addComponent(datePickerDolazak, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnOdustani, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOdaberiGosta, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(btnOdaberiSobu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtGostKojiIznajmljujeSobu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOdaberiGosta))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSobaZaIznajmljivanje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOdaberiSobu))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(datePickerDolazak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOdustani)
                    .addComponent(btnSacuvaj))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOdaberiGostaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdaberiGostaActionPerformed
        try {
            FPretragaGostiju fpg = new FPretragaGostiju(null, true, this);
            fpg.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(FUnosNovogIzdavanjaSobe.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnOdaberiGostaActionPerformed

    private void btnOdaberiSobuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdaberiSobuActionPerformed
        try {
            FPretragaSoba fps = new FPretragaSoba(null, true, this);
            fps.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(FUnosNovogIzdavanjaSobe.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnOdaberiSobuActionPerformed

    private void btnOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdustaniActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnOdustaniActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed

        Date datumDolaska = datePickerDolazak.getDate();
        FGlavna fg = (FGlavna) this.getParent();
        Recepcioner recepcioner = fg.getLogovani();

        Date now = new Date();
        try {
            validacija(izabranaSoba, izabraniGost, datumDolaska);
            if (datumDolaska.after(now)) {
                JOptionPane.showMessageDialog(this, "datum dolaska mora biti pre danasnjeg datuma!");
                return;
            }

            IzdavanjeSobe izdavanjeSobe = new IzdavanjeSobe(izabraniGost, izabranaSoba, datumDolaska, recepcioner, false);

            List<IzdavanjeSobe> listaIzdavanja = Kontroler.getInstanca().vratiIzdavanja();
            for (IzdavanjeSobe i : listaIzdavanja) {
                if(i.equals(izdavanjeSobe)){
                    JOptionPane.showMessageDialog(this, "Greska! Gost je vec iznajmio izabranu sobu za izabrani datum");
                    return;
                }
            }
            Kontroler.getInstanca().sacuvajIzdavanjeSobe(izdavanjeSobe, this);
        } catch (IOException ex) {
            Logger.getLogger(FUnosNovogIzdavanjaSobe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska: " + ex.getMessage());
        }

    }//GEN-LAST:event_btnSacuvajActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FUnosNovogIzdavanjaSobe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FUnosNovogIzdavanjaSobe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FUnosNovogIzdavanjaSobe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FUnosNovogIzdavanjaSobe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FUnosNovogIzdavanjaSobe dialog = new FUnosNovogIzdavanjaSobe(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOdaberiGosta;
    private javax.swing.JButton btnOdaberiSobu;
    private javax.swing.JButton btnOdustani;
    private javax.swing.JButton btnSacuvaj;
    private com.toedter.calendar.JDateChooser datePickerDolazak;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtGostKojiIznajmljujeSobu;
    private javax.swing.JTextField txtSobaZaIznajmljivanje;
    // End of variables declaration//GEN-END:variables

    public void setIzabraniGosta(Gost izabraniGosta) {
        this.izabraniGost = izabraniGosta;
        txtGostKojiIznajmljujeSobu.setText(izabraniGosta.toString());
    }

    public void setIzabranaSoba(Soba izabranaSoba) {
        this.izabranaSoba = izabranaSoba;
        txtSobaZaIznajmljivanje.setText(izabranaSoba.toString());
    }

    public void uspesnoCuvanje() {
        azurirajSobu(izabranaSoba);
        azurirajGosta(izabraniGost);
        JOptionPane.showMessageDialog(this, "Sistem je zapamtio novo izdavanje sobe!");
        this.dispose();
    }

    public void neuspesnoCuvanje(ServerskiOdgovor so) {
        JOptionPane.showMessageDialog(this, so.getPoruka());

    }

    private void azurirajSobu(Soba izabranaSoba) {

        try {
            int brojIzdavanja = 0;

            List<IzdavanjeSobe> listaIzdavanja = Kontroler.getInstanca().vratiIzdavanja();
            for (IzdavanjeSobe is : listaIzdavanja) {
                if (is.getSoba().getBrojSobe() == izabranaSoba.getBrojSobe() && !is.isPlaceno()) {
                    brojIzdavanja++;
                }
            }

            if (izabranaSoba.getTipSobe().getBrojKreveta() == brojIzdavanja) {
                izabranaSoba.setZauzeta(true);
                Kontroler.getInstanca().azurirajSobu(izabranaSoba, this);
            }
        } catch (IOException ex) {
            Logger.getLogger(FUnosNovogIzdavanjaSobe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void azurirajGosta(Gost izabraniGost) {
        try {
            izabraniGost.setSmesten(true);
            Kontroler.getInstanca().azurirajGosta(izabraniGost, this);
        } catch (IOException ex) {
            Logger.getLogger(FUnosNovogIzdavanjaSobe.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void uspesnoAzuriranaSoba() {
        System.out.println("uspesno je azurirana soba posle snimanja novog izdavanja");
    }

    public void neuspesnoAzuriranaSoba(ServerskiOdgovor so) {
        System.out.println("neuspesno je azurirana soba posle snimanja novog izdavanja");

    }

    public void uspesnoAzuriranGost() {
        System.out.println("uspesno je azuriran gost posle snimanja novog izdavanja");
    }

    public void neuspesnoAzuriranGost(ServerskiOdgovor so) {
        System.out.println("neuspesno je azuriran gost posle snimanja novog izdavanja");
    }

    private void validacija(Soba izabranaSoba, Gost izabraniGost, Date datumDolaska) throws Exception {
        Border a = BorderFactory.createEtchedBorder();
        Border b = BorderFactory.createLineBorder(Color.RED);

        txtSobaZaIznajmljivanje.setBorder(a);
        txtGostKojiIznajmljujeSobu.setBorder(a);
        datePickerDolazak.setBorder(a);

        if ((izabranaSoba == null) && (izabraniGost == null) && (datumDolaska == null)) {
            txtSobaZaIznajmljivanje.setBorder(b);
            txtGostKojiIznajmljujeSobu.setBorder(b);
            datePickerDolazak.setBorder(b);
            throw new Exception("Sva polja moraju biti popunjena!");
        }

        if (!(izabranaSoba == null) && (izabraniGost == null) && (datumDolaska == null)) {
            txtGostKojiIznajmljujeSobu.setBorder(b);
            datePickerDolazak.setBorder(b);
            throw new Exception("Sva polja moraju biti popunjena!");
        }
        if ((izabranaSoba == null) && !(izabraniGost == null) && (datumDolaska == null)) {
            txtSobaZaIznajmljivanje.setBorder(b);
            datePickerDolazak.setBorder(b);
            throw new Exception("Sva  polja moraju biti popunjena!");
        }
        if ((izabranaSoba == null) && (izabraniGost == null) && !(datumDolaska == null)) {
            txtSobaZaIznajmljivanje.setBorder(b);
            txtGostKojiIznajmljujeSobu.setBorder(b);
            throw new Exception("Sva  polja moraju biti popunjena!");
        }

        if ((izabranaSoba == null) && !(izabraniGost == null) && !(datumDolaska == null)) {
            txtSobaZaIznajmljivanje.setBorder(b);
            throw new Exception("Sva  polja moraju biti popunjena!");
        }
        if (!(izabranaSoba == null) && (izabraniGost == null) && !(datumDolaska == null)) {
            txtGostKojiIznajmljujeSobu.setBorder(b);
            throw new Exception("Sva  polja moraju biti popunjena!");
        }
        if (!(izabranaSoba == null) && !(izabraniGost == null) && (datumDolaska == null)) {
            datePickerDolazak.setBorder(b);
            throw new Exception("Sva  polja moraju biti popunjena!");
        }

    }
}
